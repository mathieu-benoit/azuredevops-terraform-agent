trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
pr:
  branches:
    include:
    - refs/heads/*
  paths:
    exclude:
    - README.md

variables:
  vmImage: 'ubuntu-16.04'
  location: eastus
  # for release, define 5 more variables: resourceGroupName, clientId, clientSecret, subscriptionId and tenantId in the build pipeline in UI

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    variables:
      imageName: 'terraform-agent'
      terraformVersion: 0.12.0
      # define 3 more variables: registryName, registryLogin and registryPassword in the pipeline definition UI
    displayName: terraform docker image build
    pool:
      vmImage: $(vmImage)
    steps:
    - bash: docker build -f $(system.defaultWorkingDirectory)/Dockerfile -t $(registryName)/$(imageName):$(terraformVersion) -t $(registryName)/$(imageName):latest --build-arg TERRAFORM_VERSION=$(terraformVersion) $(system.defaultWorkingDirectory)
      displayName: 'docker build'
    - bash: docker login -u $(registryLogin) -p $(registryPassword)
      displayName: 'docker login'
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    - bash: |
        docker push $(registryName)/$(imageName):$(terraformVersion)
        docker push $(registryName)/$(imageName):latest
      displayName: 'docker push'
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
- stage: Release
  displayName: Release stage
  jobs:
  - job: Release
    variables:
      location: eastus
      # for release, define 5 more variables: resourceGroupName, clientId, clientSecret, subscriptionId and tenantId in the pipeline definition UI
    displayName: deploy for testing
    container: mabenoit/terraform-agent:latest
    pool:
      vmImage: $(vmImage)
    steps:
    - script: |
        terraform --version
        cd $(system.defaultWorkingDirectory)/example
        terraform init
        terraform apply -auto-approve -var resource_group_name=$(resourceGroupName) -var location=$(location)
      displayName: 'Terraform init and apply'
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      env:
          ARM_TENANT_ID: $(tenantId)
          ARM_SUBSCRIPTION_ID: $(subscriptionId)
          ARM_CLIENT_ID: $(clientId)
          ARM_CLIENT_SECRET: $(clientSecret)
